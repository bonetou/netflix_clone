[{"C:\\Users\\hbone\\dev\\netflix_clone\\src\\index.js":"1","C:\\Users\\hbone\\dev\\netflix_clone\\src\\App.js":"2","C:\\Users\\hbone\\dev\\netflix_clone\\src\\Tmdb.js":"3","C:\\Users\\hbone\\dev\\netflix_clone\\src\\components\\movieRow.js":"4","C:\\Users\\hbone\\dev\\netflix_clone\\src\\components\\featuredMovie.js":"5","C:\\Users\\hbone\\dev\\netflix_clone\\src\\components\\header.js":"6"},{"size":196,"mtime":1611578891167,"results":"7","hashOfConfig":"8"},{"size":1730,"mtime":1611687943693,"results":"9","hashOfConfig":"8"},{"size":2606,"mtime":1611679037308,"results":"10","hashOfConfig":"8"},{"size":1826,"mtime":1611688111395,"results":"11","hashOfConfig":"8"},{"size":1663,"mtime":1611682729489,"results":"12","hashOfConfig":"8"},{"size":625,"mtime":1611684809033,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"hqd248",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"16"},"C:\\Users\\hbone\\dev\\netflix_clone\\src\\index.js",[],["33","34"],"C:\\Users\\hbone\\dev\\netflix_clone\\src\\App.js",["35"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/movieRow';\nimport FeaturedMovie from './components/featuredMovie';\nimport Header from './components/header';\n\nexport default () => {\n  const [moviesList, setMoviesList] = useState([])\n  const [featuredData, setFeatureData] = useState(null)\n  const [blackHeader, setBlackHeader] = useState(false)\n\n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList()\n      setMoviesList(list)\n\n      let originals = list.filter(i => i.slug === 'originals')\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randomChosen]\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n      setFeatureData(chosenInfo)\n    }\n    loadAll()\n  }, [])\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true)\n      } else {\n        setBlackHeader(false)\n      }\n    }\n    window.addEventListener('scroll', scrollListener)\n    return () => {\n      window.removeEventListener('scroll', scrollListener)\n    }\n  }, [])\n\n  return (\n    <div className=\"page\">\n      <Header black={blackHeader }></Header>\n      {featuredData && <FeaturedMovie item={featuredData} />}\n      <section className=\"lists\">\n        {moviesList.map((item, key) => (\n          <div>\n            <MovieRow key={key} title={item.title} items={item.items} />\n          </div>\n        ))}\n      </section>\n\n      <footer>\n        Direitos de imagem para a Netflix. <br/>\n        Feito com React usando a API da Themoviedb.org. \n      </footer>\n    </div>\n  )\n}","C:\\Users\\hbone\\dev\\netflix_clone\\src\\Tmdb.js",["36"],"const API_KEY = 'f4d37c85077cdda4501a10c8305a325c';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`)\r\n    const json = await req.json()\r\n    return json\r\n}\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais Netlflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {}\r\n\r\n        if (movieId) {\r\n            switch (type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                    break\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                    break\r\n                default:\r\n                    info = null;\r\n                    break\r\n            }\r\n        }\r\n        return info\r\n    }\r\n}","C:\\Users\\hbone\\dev\\netflix_clone\\src\\components\\movieRow.js",["37"],"import React, { useState } from 'react';\r\nimport './movieRow.css';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({ title, items }) => {\r\n\r\n    const [scrollX, setScrollX] = useState(0)\r\n\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2)\r\n        if (x > 0) {\r\n            x = 0\r\n        }\r\n        setScrollX(x)\r\n    }\r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2)\r\n        let listW = items.results.length * 150\r\n\r\n        if ((window.innerWidth - listW) > x) {\r\n            x = (window.innerWidth - listW) - 60\r\n        }\r\n        setScrollX(x)\r\n    }\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300/${item.poster_path}`} alt={item.original_title}>\r\n                            </img>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\hbone\\dev\\netflix_clone\\src\\components\\featuredMovie.js",["38"],"import React from 'react';\r\nimport './featuredMovie.css';\r\n\r\nexport default ({ item }) => {\r\n\r\n    let firstDate = new Date(item.first_air_date)\r\n    let genres = []\r\n\r\n    for (let i in item.genres) {\r\n        genres.push(item.genres[i].name)\r\n    }\r\n\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original/${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ' '}</div>\r\n                    </div>\r\n                    <div className=\"featured--description\">{item.overview}</div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">▶ Assistir</a>\r\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\r\n                    </div>\r\n                    <div className=\"featured--genres\"><strong>Gêneros: </strong>{genres.join(', ')}</div>\r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}",["39","40"],"C:\\Users\\hbone\\dev\\netflix_clone\\src\\components\\header.js",["41","42","43"],"import React from 'react';\r\nimport './header.css';\r\n\r\nexport default ({ black }) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"></img>\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"></img>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":8,"column":1,"nodeType":"50","endLine":59,"endColumn":2},{"ruleId":"48","severity":1,"message":"51","line":9,"column":1,"nodeType":"50","endLine":73,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":6,"column":1,"nodeType":"50","endLine":52,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":4,"column":1,"nodeType":"50","endLine":38,"endColumn":2},{"ruleId":"44","replacedBy":"52"},{"ruleId":"46","replacedBy":"53"},{"ruleId":"48","severity":1,"message":"49","line":4,"column":1,"nodeType":"50","endLine":19,"endColumn":2},{"ruleId":"54","severity":1,"message":"55","line":9,"column":21,"nodeType":"56","endLine":9,"endColumn":96},{"ruleId":"54","severity":1,"message":"55","line":14,"column":21,"nodeType":"56","endLine":14,"endColumn":103},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default",["57"],["58"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]